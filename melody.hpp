#pragma once

constexpr double BEAT_UNIT = 32 * 128.0 / 60000.0;

constexpr int LEN1 = 62;
constexpr int restField1[LEN1] = {
    0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
constexpr int notes1[LEN1] = {
    0, -5, 5, 3, -4, -2, 0, -2, 0, 8, 7, 5,  3, -2, 0,  2,  3,  7,  8,  7, 0,
    0, 3,  5, 7, 10, 8,  7, 5,  7, 4, 8, 7,  5, 8,  12, 14, 12, 10, 8,  7, 5,
    3, -2, 0, 2, 3,  7,  8, 7,  0, 0, 3, -1, 3, 2,  10, 5,  8,  7,  -2, 3};
constexpr int rhythm1[LEN1] = {
    16, 64, 16, 48,  16, 16,  16, 64, 48, 16, 16, 16, 32, 32, 32, 32,
    48, 80, 16, 16,  64, 112, 32, 16, 48, 32, 32, 32, 32, 48, 32, 16,
    16, 32, 16, 16,  32, 16,  64, 16, 16, 16, 32, 32, 32, 32, 48, 80,
    16, 16, 64, 112, 32, 16,  48, 32, 32, 32, 32, 32, 16, 64};
constexpr int LEN2 = 401;
constexpr int restField2[LEN2] = {
    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
constexpr int notes2[LEN2] = {
    0,  -24, -12, -5, -9, 0,  -9,  -5,  -9, -24, -12, -5, -9, 0,   -9, -5,
    -9, 3,   15,  14, 15, 12, 15,  10,  15, 8,   15,  7,  15, 5,   15, 3,
    15, 2,   14,  12, 14, 10, 14,  8,   14, 7,   14,  5,  14, 3,   14, 2,
    14, 0,   12,  10, 12, 8,  12,  7,   12, 5,   12,  3,  12, 2,   12, 0,
    12, 12,  -17, 11, 9,  11, -13, -10, 12, 12,  -12, -5, -9, 0,   -9, -5,
    -9, 15,  3,   5,  3,  7,  3,   8,   3,  10,  3,   12, 3,  14,  3,  15,
    3,  14,  2,   3,  2,  5,  2,   7,   2,  8,   2,   10, 2,  12,  2,  14,
    2,  12,  0,   2,  0,  3,  0,   5,   0,  7,   0,   8,  0,  10,  0,  12,
    0,  12,  -17, 11, 9,  11, -13, -10, 12, 12,  -12, -5, -9, 0,   -9, -5,
    -9, 15,  27,  26, 27, 24, 27,  22,  27, 20,  27,  19, 27, 17,  27, 15,
    27, 14,  26,  24, 26, 22, 26,  20,  26, 19,  26,  17, 26, 15,  26, 14,
    26, 12,  24,  22, 24, 20, 24,  19,  24, 17,  24,  15, 24, 14,  24, 12,
    24, 24,  -17, 23, 21, 23, -13, -10, 24, 24,  -12, -5, -9, 0,   -9, -5,
    -9, 27,  15,  17, 15, 19, 15,  20,  15, 22,  15,  24, 15, 26,  15, 27,
    15, 26,  14,  15, 14, 17, 14,  19,  14, 20,  14,  22, 14, 24,  14, 26,
    14, 24,  12,  14, 12, 15, 12,  17,  12, 19,  12,  20, 12, 22,  12, 24,
    12, 24,  -17, 23, 21, 23, -13, -10, 24, 24,  -12, -5, -9, 0,   -9, -5,
    -9, 3,   3,   15, 3,  14, 3,   12,  3,  10,  3,   8,  3,  7,   3,  5,
    3,  2,   2,   14, 2,  12, 2,   10,  2,  8,   2,   7,  2,  5,   2,  3,
    2,  0,   0,   12, 0,  10, 0,   8,   0,  7,   0,   5,  0,  3,   0,  2,
    0,  0,   -17, -1, -3, -1, -13, -10, 0,  0,   -12, -5, -9, 0,   -9, -5,
    -9, 27,  39,  26, 38, 24, 36,  22,  34, 20,  32,  19, 31, 17,  29, 15,
    27, 14,  26,  12, 24, 10, 22,  8,   20, 7,   19,  5,  17, 3,   15, 2,
    14, 0,   12,  -2, 10, -4, 8,   -5,  7,  -7,  5,   -9, 3,  -10, 2,  -12,
    0,  0,   -17, -1, -3, -1, -13, -10, 0,  0,   -12, -5, -9, 0,   -9, -5,
    -9};
constexpr int rhythm2[LEN2] = {
    32, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
    16, 16};

class Melody {
private:
  static const double BEAT_UNIT = 32 * 128.0 / 60000.0;

  const int *m_play;
  const int *m_notes;
  const int *m_rhythm;
  int m_len;
  bool m_vibrato;
  int state;
  const int m_pin;
  int *m_sums;
  int m_total;

  inline double eqlTemp(int note) { return pow(2, note / 12.0) * 440; }

  void updateSums() {
    delete [] m_sums;
    m_sums = new int[m_len + 1];
    int total = 0;
    m_sums[0] = total;
    for (int i = 0; i < m_len; ++i) {
      total += m_rhythm[i];
      m_sums[i + 1] = total;
    }
    m_total = total;
  }

  int findTiming(double x) {
    // using binary search
    // but first check neighbors of last match
    // let 'a' be the first boundary and 'b' the second boundary.
    // if a <= x < b, then return index of a.

    // https://www.desmos.com/calculator/bx3mc2wgya

    // LENGTH without -1 because accumulative is one number larger
    int a = 0, b = m_len;
    while (b - a > 1) {
      int mid = (a + b) / 2;
      if (m_sums[mid] < x && b - mid >= 1) {
        a = mid;
      } else if (m_sums[mid] >= x && mid - a >= 1) {
        b = mid;
      }
    }
    return a;
  }

public:
  Melody(bool vibrato, int pin)
      : state(1), m_vibrato(false), m_len(LEN1), m_play(restField1),
        m_notes(notes1), m_rhythm(rhythm1), m_pin(pin) {
    int total = 0;
    updateSums();
  }
  ~Melody() {
    delete [] m_sums;
  }

  void toggle() {
    state = (state == 1 ? 2 : 1);
    switch (state) {
    case 1:
      m_len = LEN1;
      m_play = restField1;
      m_notes = notes1;
      m_rhythm = rhythm1;
      break;

    case 2:
      m_len = LEN1;
      m_play = restField2;
      m_notes = notes2;
      m_rhythm = rhythm2;
      break;

    default:
      break;
    }
    updateSums();
  }

  int getTone(unsigned long time) {
    int index = findTiming(time * Melody::BEAT_UNIT);
    if (m_play[index]) {
      tone(m_pin, eqlTemp(m_notes[index]));
    } else {
      noTone(m_pin);
    }
  }
};
