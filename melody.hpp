#pragma once

constexpr double BEAT_UNIT = 32 * 128.0 / 60000.0;

/* parse notes with js
arr = [...];
str = [0].concat(arr.map((e,i,a) => a.slice(0,i+1).reduce((a,b,c) => a +
b))).join(", "); copy(str);
*/

constexpr int LEN1 = 62;
constexpr int restField1[LEN1] = {
    0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
constexpr int notes1[LEN1] = {
    0, -5, 5, 3, -4, -2, 0, -2, 0, 8, 7, 5,  3, -2, 0,  2,  3,  7,  8,  7, 0,
    0, 3,  5, 7, 10, 8,  7, 5,  7, 4, 8, 7,  5, 8,  12, 14, 12, 10, 8,  7, 5,
    3, -2, 0, 2, 3,  7,  8, 7,  0, 0, 3, -1, 3, 2,  10, 5,  8,  7,  -2, 3};
constexpr int rhythm1[LEN1] = {
    16, 64, 16, 48,  16, 16,  16, 64, 48, 16, 16, 16, 32, 32, 32, 32,
    48, 80, 16, 16,  64, 112, 32, 16, 48, 32, 32, 32, 32, 48, 32, 16,
    16, 32, 16, 16,  32, 16,  64, 16, 16, 16, 32, 32, 32, 32, 48, 80,
    16, 16, 64, 112, 32, 16,  48, 32, 32, 32, 32, 32, 16, 64};
constexpr int timing1[LEN1 + 1] = {
    0,    16,   80,   96,   144,  160,  176,  192,  256,  304,  320,
    336,  352,  384,  416,  448,  480,  528,  608,  624,  640,  704,
    816,  848,  864,  912,  944,  976,  1008, 1040, 1088, 1120, 1136,
    1152, 1184, 1200, 1216, 1248, 1264, 1328, 1344, 1360, 1376, 1408,
    1440, 1472, 1504, 1552, 1632, 1648, 1664, 1728, 1840, 1872, 1888,
    1936, 1968, 2000, 2032, 2064, 2096, 2112, 2176};
constexpr int LEN2 = 401;
constexpr int restField2[LEN2] = {
    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
constexpr int notes2[LEN2] = {
    0,  -24, -12, -5, -9, 0,  -9,  -5,  -9, -24, -12, -5, -9, 0,   -9, -5,
    -9, 3,   15,  14, 15, 12, 15,  10,  15, 8,   15,  7,  15, 5,   15, 3,
    15, 2,   14,  12, 14, 10, 14,  8,   14, 7,   14,  5,  14, 3,   14, 2,
    14, 0,   12,  10, 12, 8,  12,  7,   12, 5,   12,  3,  12, 2,   12, 0,
    12, 12,  -17, 11, 9,  11, -13, -10, 12, 12,  -12, -5, -9, 0,   -9, -5,
    -9, 15,  3,   5,  3,  7,  3,   8,   3,  10,  3,   12, 3,  14,  3,  15,
    3,  14,  2,   3,  2,  5,  2,   7,   2,  8,   2,   10, 2,  12,  2,  14,
    2,  12,  0,   2,  0,  3,  0,   5,   0,  7,   0,   8,  0,  10,  0,  12,
    0,  12,  -17, 11, 9,  11, -13, -10, 12, 12,  -12, -5, -9, 0,   -9, -5,
    -9, 15,  27,  26, 27, 24, 27,  22,  27, 20,  27,  19, 27, 17,  27, 15,
    27, 14,  26,  24, 26, 22, 26,  20,  26, 19,  26,  17, 26, 15,  26, 14,
    26, 12,  24,  22, 24, 20, 24,  19,  24, 17,  24,  15, 24, 14,  24, 12,
    24, 24,  -17, 23, 21, 23, -13, -10, 24, 24,  -12, -5, -9, 0,   -9, -5,
    -9, 27,  15,  17, 15, 19, 15,  20,  15, 22,  15,  24, 15, 26,  15, 27,
    15, 26,  14,  15, 14, 17, 14,  19,  14, 20,  14,  22, 14, 24,  14, 26,
    14, 24,  12,  14, 12, 15, 12,  17,  12, 19,  12,  20, 12, 22,  12, 24,
    12, 24,  -17, 23, 21, 23, -13, -10, 24, 24,  -12, -5, -9, 0,   -9, -5,
    -9, 3,   3,   15, 3,  14, 3,   12,  3,  10,  3,   8,  3,  7,   3,  5,
    3,  2,   2,   14, 2,  12, 2,   10,  2,  8,   2,   7,  2,  5,   2,  3,
    2,  0,   0,   12, 0,  10, 0,   8,   0,  7,   0,   5,  0,  3,   0,  2,
    0,  0,   -17, -1, -3, -1, -13, -10, 0,  0,   -12, -5, -9, 0,   -9, -5,
    -9, 27,  39,  26, 38, 24, 36,  22,  34, 20,  32,  19, 31, 17,  29, 15,
    27, 14,  26,  12, 24, 10, 22,  8,   20, 7,   19,  5,  17, 3,   15, 2,
    14, 0,   12,  -2, 10, -4, 8,   -5,  7,  -7,  5,   -9, 3,  -10, 2,  -12,
    0,  0,   -17, -1, -3, -1, -13, -10, 0,  0,   -12, -5, -9, 0,   -9, -5,
    -9};
constexpr int rhythm2[LEN2] = {
    32, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
    16, 16};
constexpr int timing2[LEN2 + 1] = {
    0,    32,   48,   64,   80,   96,   112,  128,  144,  160,  176,  192,
    208,  224,  240,  256,  272,  288,  304,  320,  336,  352,  368,  384,
    400,  416,  432,  448,  464,  480,  496,  512,  528,  544,  560,  576,
    592,  608,  624,  640,  656,  672,  688,  704,  720,  736,  752,  768,
    784,  800,  816,  832,  848,  864,  880,  896,  912,  928,  944,  960,
    976,  992,  1008, 1024, 1040, 1056, 1072, 1088, 1104, 1120, 1136, 1152,
    1168, 1184, 1200, 1216, 1232, 1248, 1264, 1280, 1296, 1312, 1328, 1344,
    1360, 1376, 1392, 1408, 1424, 1440, 1456, 1472, 1488, 1504, 1520, 1536,
    1552, 1568, 1584, 1600, 1616, 1632, 1648, 1664, 1680, 1696, 1712, 1728,
    1744, 1760, 1776, 1792, 1808, 1824, 1840, 1856, 1872, 1888, 1904, 1920,
    1936, 1952, 1968, 1984, 2000, 2016, 2032, 2048, 2064, 2080, 2096, 2112,
    2128, 2144, 2160, 2176, 2192, 2208, 2224, 2240, 2256, 2272, 2288, 2304,
    2320, 2336, 2352, 2368, 2384, 2400, 2416, 2432, 2448, 2464, 2480, 2496,
    2512, 2528, 2544, 2560, 2576, 2592, 2608, 2624, 2640, 2656, 2672, 2688,
    2704, 2720, 2736, 2752, 2768, 2784, 2800, 2816, 2832, 2848, 2864, 2880,
    2896, 2912, 2928, 2944, 2960, 2976, 2992, 3008, 3024, 3040, 3056, 3072,
    3088, 3104, 3120, 3136, 3152, 3168, 3184, 3200, 3216, 3232, 3248, 3264,
    3280, 3296, 3312, 3328, 3344, 3360, 3376, 3392, 3408, 3424, 3440, 3456,
    3472, 3488, 3504, 3520, 3536, 3552, 3568, 3584, 3600, 3616, 3632, 3648,
    3664, 3680, 3696, 3712, 3728, 3744, 3760, 3776, 3792, 3808, 3824, 3840,
    3856, 3872, 3888, 3904, 3920, 3936, 3952, 3968, 3984, 4000, 4016, 4032,
    4048, 4064, 4080, 4096, 4112, 4128, 4144, 4160, 4176, 4192, 4208, 4224,
    4240, 4256, 4272, 4288, 4304, 4320, 4336, 4352, 4368, 4384, 4400, 4416,
    4432, 4448, 4464, 4480, 4496, 4512, 4528, 4544, 4560, 4576, 4592, 4608,
    4624, 4640, 4656, 4672, 4688, 4704, 4720, 4736, 4752, 4768, 4784, 4800,
    4816, 4832, 4848, 4864, 4880, 4896, 4912, 4928, 4944, 4960, 4976, 4992,
    5008, 5024, 5040, 5056, 5072, 5088, 5104, 5120, 5136, 5152, 5168, 5184,
    5200, 5216, 5232, 5248, 5264, 5280, 5296, 5312, 5328, 5344, 5360, 5376,
    5392, 5408, 5424, 5440, 5456, 5472, 5488, 5504, 5520, 5536, 5552, 5568,
    5584, 5600, 5616, 5632, 5648, 5664, 5680, 5696, 5712, 5728, 5744, 5760,
    5776, 5792, 5808, 5824, 5840, 5856, 5872, 5888, 5904, 5920, 5936, 5952,
    5968, 5984, 6000, 6016, 6032, 6048, 6064, 6080, 6096, 6112, 6128, 6144,
    6160, 6176, 6192, 6208, 6224, 6240, 6256, 6272, 6288, 6304, 6320, 6336,
    6352, 6368, 6384, 6400, 6416, 6432};

class Melody {
private:
  static const double BEAT_UNIT = 32 * 128.0 / 60000.0;

  const int *m_play;
  const int *m_notes;
  const int *m_rhythm;
  const int *m_sums;
  int m_len;
  bool m_vibrato;
  int state;
  const int m_pin;
  int m_total;

  inline double eqlTemp(int note) { return pow(2, note / 12.0) * 440; }

  void updateSums() {
    m_total = m_sums[m_len];
  }

  int findTiming(double x) {
    // using binary search
    // but first check neighbors of last match
    // let 'a' be the first boundary and 'b' the second boundary.
    // if a <= x < b, then return index of a.

    // https://www.desmos.com/calculator/bx3mc2wgya

    // LENGTH without -1 because accumulative is one number larger
    int a = 0, b = m_len;
    while (b - a > 1) {
      int mid = (a + b) / 2;
      if (m_sums[mid] < x && b - mid >= 1) {
        a = mid;
      } else if (m_sums[mid] >= x && mid - a >= 1) {
        b = mid;
      }
    }
    return a;
  }

public:
  Melody(bool vibrato, int pin)
      : state(1), m_vibrato(false), m_len(LEN1), m_play(restField1),
        m_notes(notes1), m_rhythm(rhythm1), m_pin(pin) {
    int total = 0;
    updateSums();
  }
  ~Melody() { delete[] m_sums; }

  void toggle() {
    state = (state == 1 ? 2 : 1);
    switch (state) {
    case 1:
      m_len = LEN1;
      m_play = restField1;
      m_notes = notes1;
      m_rhythm = rhythm1;
      m_sums = timing1;
      break;

    case 2:
      m_len = LEN1;
      m_play = restField2;
      m_notes = notes2;
      m_rhythm = rhythm2;
      m_sums = timing2;
      break;

    default:
      break;
    }
    updateSums();
  }

  int getTone(unsigned long time) {
    int index = findTiming(time * Melody::BEAT_UNIT);
    if (m_play[index]) {
      tone(m_pin, eqlTemp(m_notes[index]));
    } else {
      noTone(m_pin);
    }
  }
};
